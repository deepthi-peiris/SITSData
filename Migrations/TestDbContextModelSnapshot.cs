// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SITSData.Data;

namespace SITSData.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("test")
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityCore.Models.IELTS.IELTSResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BS")
                        .HasColumnType("float");

                    b.Property<int?>("CivilID")
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateVerified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("L")
                        .HasColumnType("float");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("R")
                        .HasColumnType("float");

                    b.Property<double>("S")
                        .HasColumnType("float");

                    b.Property<string>("ScannedCopy")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("W")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("IELTSResults");
                });

            modelBuilder.Entity("EntityCore.Models.Test.EngEntryRecord", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<double?>("BS")
                        .HasColumnType("float");

                    b.Property<int?>("BasicMathematics")
                        .HasColumnType("int");

                    b.Property<int?>("Computing")
                        .HasColumnType("int");

                    b.Property<int?>("IELTSResultsId")
                        .HasColumnType("int");

                    b.Property<double?>("L")
                        .HasColumnType("float");

                    b.Property<int?>("Physics")
                        .HasColumnType("int");

                    b.Property<int?>("PureMathematics")
                        .HasColumnType("int");

                    b.Property<double?>("R")
                        .HasColumnType("float");

                    b.Property<double?>("S")
                        .HasColumnType("float");

                    b.Property<double?>("W")
                        .HasColumnType("float");

                    b.HasKey("StudentId");

                    b.HasIndex("IELTSResultsId");

                    b.ToTable("EngEntryRecord");
                });

            modelBuilder.Entity("EntityCore.Models.Test.GSDEntryRecord", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("English")
                        .HasColumnType("int");

                    b.Property<int?>("EntryLevel")
                        .HasColumnType("int");

                    b.Property<int>("Maths")
                        .HasColumnType("int");

                    b.Property<int>("Physics")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.ToTable("GSDEntryRecord");
                });

            modelBuilder.Entity("EntityCore.Models.Test.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CivilId")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateEnrolled")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("StudentId");

                    b.ToTable("Student","test");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Student");
                });

            modelBuilder.Entity("EntityCore.Models.Test.EngStudent", b =>
                {
                    b.HasBaseType("EntityCore.Models.Test.Student");

                    b.Property<int?>("EngEntryRecordStudentId")
                        .HasColumnType("int");

                    b.Property<int>("EntryType")
                        .HasColumnType("int");

                    b.Property<int?>("UoPId")
                        .HasColumnType("int");

                    b.HasIndex("EngEntryRecordStudentId");

                    b.HasDiscriminator().HasValue("EngStudent");
                });

            modelBuilder.Entity("EntityCore.Models.Test.GSDStudent", b =>
                {
                    b.HasBaseType("EntityCore.Models.Test.Student");

                    b.Property<int?>("GSDEntryRecordStudentId")
                        .HasColumnType("int");

                    b.HasIndex("GSDEntryRecordStudentId");

                    b.HasDiscriminator().HasValue("GSDStudent");
                });

            modelBuilder.Entity("EntityCore.Models.Test.EngEntryRecord", b =>
                {
                    b.HasOne("EntityCore.Models.IELTS.IELTSResults", "IELTSRecord")
                        .WithMany()
                        .HasForeignKey("IELTSResultsId");
                });

            modelBuilder.Entity("EntityCore.Models.Test.EngStudent", b =>
                {
                    b.HasOne("EntityCore.Models.Test.EngEntryRecord", "EngEntryRecord")
                        .WithMany()
                        .HasForeignKey("EngEntryRecordStudentId");
                });

            modelBuilder.Entity("EntityCore.Models.Test.GSDStudent", b =>
                {
                    b.HasOne("EntityCore.Models.Test.GSDEntryRecord", "GSDEntryRecord")
                        .WithMany()
                        .HasForeignKey("GSDEntryRecordStudentId");
                });
#pragma warning restore 612, 618
        }
    }
}
